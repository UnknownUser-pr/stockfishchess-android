name: Android CI Build (Manual Trigger)

on:
  workflow_dispatch: # Allows manual triggering from the GitHub Actions UI
  # push: # Commented out to disable automatic push triggers
  #   branches: [ "master", "main" ]
  # pull_request: # Commented out to disable automatic pull request triggers
  #   branches: [ "master", "main" ]

env:
  # NDK version known to support stlport_static for armeabi-v7a.
  # r17c is the last NDK that included stlport.
  NDK_VERSION_NAME: android-ndk-r17c
  NDK_EXTRACTED_DIR: android-ndk-r17c
  NDK_INSTALL_PATH: ${{ github.workspace }}/ndk_tools

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17 # MODIFIED: Changed from JDK 11 to JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17' # MODIFIED

    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      # This action sets up ANDROID_HOME and adds basic SDK tools to PATH.
      # It might download newer command-line tools if it finds the pre-installed ones unsuitable.
      # The error indicated the sdkmanager it used requires JDK 17.

    - name: Install Android SDK Platforms, Build Tools, and Add-ons
      run: |
        # Using yes to auto-accept licenses.
        # project.properties specifies: target=Google Inc.:Google APIs:16
        # Build tools 25.0.3 is chosen for better compatibility with older Ant projects for API 16.
        # If you still have issues, you might need to experiment with different build-tools versions
        # or install a specific version of command-line tools before this step.
        echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses # Accept licenses with the latest tools
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-16" "add-ons;addon-google_apis-google-16" "build-tools;25.0.3" "platform-tools"


    - name: Cache NDK
      id: cache-ndk
      uses: actions/cache@v4
      with:
        path: ${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_EXTRACTED_DIR }}
        key: ${{ runner.os }}-ndk-${{ env.NDK_VERSION_NAME }}

    - name: Download and set up Android NDK
      if: steps.cache-ndk.outputs.cache-hit != 'true'
      run: |
        mkdir -p ${{ env.NDK_INSTALL_PATH }}
        cd ${{ env.NDK_INSTALL_PATH }}
        wget -q https://dl.google.com/android/repository/${{ env.NDK_VERSION_NAME }}-linux-x86_64.zip -O ndk.zip
        unzip -q ndk.zip
        rm ndk.zip
        echo "NDK extracted to ${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_EXTRACTED_DIR }}"

    - name: Set NDK Environment Variables
      run: |
        echo "NDK_ROOT=${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_EXTRACTED_DIR }}" >> $GITHUB_ENV
        echo "${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_EXTRACTED_DIR }}" >> $GITHUB_PATH
        echo "ANDROID_NDK_HOME=${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_EXTRACTED_DIR }}" >> $GITHUB_ENV

    - name: Create local.properties for Ant
      run: |
        echo "sdk.dir=${ANDROID_HOME}" > DroidFish/local.properties
        echo "ndk.dir=${NDK_ROOT}" >> DroidFish/local.properties
        echo "Created DroidFish/local.properties with SDK and NDK paths"

    - name: Build DroidFish with Ant
      working-directory: DroidFish
      run: ant debug

    - name: Upload DroidFish APK
      uses: actions/upload-artifact@v4
      with:
        name: DroidFish-debug
        path: DroidFish/bin/DroidFish-debug.apk
        if-no-files-found: error
