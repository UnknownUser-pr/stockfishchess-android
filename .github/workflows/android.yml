name: Android CI Build (Manual Trigger)

on:
  workflow_dispatch: # Allows manual triggering from the GitHub Actions UI
  # push: # Commented out to disable automatic push triggers
  #   branches: [ "master", "main" ]
  # pull_request: # Commented out to disable automatic pull request triggers
  #   branches: [ "master", "main" ]

env:
  # NDK version known to support stlport_static for armeabi-v7a.
  # r17c is the last NDK that included stlport.
  NDK_VERSION_NAME: android-ndk-r17c
  NDK_EXTRACTED_DIR: android-ndk-r17c
  NDK_INSTALL_PATH: ${{ github.workspace }}/ndk_tools

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17' # Updated to JDK 17

    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      # This action sets up ANDROID_HOME and should provide a modern sdkmanager.

    - name: Install Android SDK Components (including legacy tools)
      env:
        ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }} # Make sure sdkmanager knows its root
      run: |
        SDK_MANAGER_CMD="${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager"
        if [ ! -f "$SDK_MANAGER_CMD" ]; then
          # Fallback if 'latest' isn't a symlink or directory in the expected structure
          SDK_MANAGER_CMD=$(find "${ANDROID_HOME}/cmdline-tools" -name sdkmanager | sort -V | tail -n 1)
          if [ -z "$SDK_MANAGER_CMD" ] || [ ! -f "$SDK_MANAGER_CMD" ]; then
            echo "Error: sdkmanager not found in cmdline-tools after setup-android action."
            exit 1
          fi
        fi
        echo "Using sdkmanager at: $SDK_MANAGER_CMD"

        echo "Attempting to accept licenses..."
        yes | $SDK_MANAGER_CMD --licenses || echo "License acceptance might have had non-critical errors, proceeding."

        echo "Installing legacy 'tools' and 'platform-tools' first..."
        # Attempt to install the legacy 'tools' package. This is crucial for old Ant builds.
        # --channel=0 ensures stable versions. If "tools" is not found, it might be unavailable via modern sdkmanager.
        $SDK_MANAGER_CMD --channel=0 "tools" "platform-tools"

        echo "Installing target platform and build-tools..."
        $SDK_MANAGER_CMD "platforms;android-16" "add-ons;addon-google_apis-google-16" "build-tools;25.0.3"

        echo "Verifying Ant build file presence..."
        ANT_BUILD_FILE="${ANDROID_HOME}/tools/ant/build.xml"
        if [ -f "$ANT_BUILD_FILE" ]; then
          echo "SUCCESS: Found Ant build file: $ANT_BUILD_FILE"
        else
          echo "ERROR: Ant build file NOT found: $ANT_BUILD_FILE"
          echo "Listing contents of ${ANDROID_HOME}..."
          ls -la "${ANDROID_HOME}"
          if [ -d "${ANDROID_HOME}/tools" ]; then
            echo "Listing contents of ${ANDROID_HOME}/tools..."
            ls -la "${ANDROID_HOME}/tools"
            if [ -d "${ANDROID_HOME}/tools/ant" ]; then
                echo "Listing contents of ${ANDROID_HOME}/tools/ant..."
                ls -la "${ANDROID_HOME}/tools/ant"
            else
                echo "${ANDROID_HOME}/tools/ant directory does not exist."
            fi
          else
            echo "${ANDROID_HOME}/tools directory does not exist."
          fi
          echo "The project's Ant build system requires the legacy file '${ANDROID_HOME}/tools/ant/build.xml'."
          echo "This file is typically part of the older 'Android SDK Tools' package."
          echo "If 'sdkmanager \"tools\"' did not create this file, the modern SDK manager might not support installing it in the legacy location."
          exit 1
        fi

    - name: Cache NDK
      id: cache-ndk
      uses: actions/cache@v4
      with:
        path: ${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_EXTRACTED_DIR }}
        key: ${{ runner.os }}-ndk-${{ env.NDK_VERSION_NAME }}

    - name: Download and set up Android NDK
      if: steps.cache-ndk.outputs.cache-hit != 'true'
      run: |
        mkdir -p ${{ env.NDK_INSTALL_PATH }}
        cd ${{ env.NDK_INSTALL_PATH }}
        wget -q https://dl.google.com/android/repository/${{ env.NDK_VERSION_NAME }}-linux-x86_64.zip -O ndk.zip
        unzip -q ndk.zip
        rm ndk.zip
        echo "NDK extracted to ${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_EXTRACTED_DIR }}"

    - name: Set NDK Environment Variables
      run: |
        echo "NDK_ROOT=${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_EXTRACTED_DIR }}" >> $GITHUB_ENV
        echo "${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_EXTRACTED_DIR }}" >> $GITHUB_PATH
        echo "ANDROID_NDK_HOME=${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_EXTRACTED_DIR }}" >> $GITHUB_ENV

    - name: Create local.properties for Ant
      run: |
        echo "sdk.dir=${ANDROID_HOME}" > DroidFish/local.properties
        echo "ndk.dir=${NDK_ROOT}" >> DroidFish/local.properties
        echo "Created DroidFish/local.properties with SDK and NDK paths"

    - name: Build DroidFish with Ant
      working-directory: DroidFish
      run: ant debug

    - name: Upload DroidFish APK
      uses: actions/upload-artifact@v4
      with:
        name: DroidFish-debug
        path: DroidFish/bin/DroidFish-debug.apk
        if-no-files-found: error
