name: Android CI Build

on:
  push:
    branches: [ "master", "main" ] # Adjust to your default branch if different
  pull_request:
    branches: [ "master", "main" ] # Adjust to your default branch if different

env:
  # NDK version known to support stlport_static for armeabi-v7a.
  # r17c is the last NDK that included stlport.
  # If r17c download fails, r16b is another option: https://dl.google.com/android/repository/android-ndk-r16b-linux-x86_64.zip
  NDK_VERSION_NAME: android-ndk-r17c
  # The directory name after extraction from the NDK zip file
  NDK_EXTRACTED_DIR: android-ndk-r17c
  # Path where NDK will be downloaded and extracted
  NDK_INSTALL_PATH: ${{ github.workspace }}/ndk_tools

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      # This action sets up ANDROID_HOME and adds basic SDK tools to PATH.
      # We'll install specific platforms/build-tools via sdkmanager next.

    - name: Install Android SDK Platforms, Build Tools, and Add-ons
      run: |
        # Using yes to auto-accept licenses.
        # project.properties specifies: target=Google Inc.:Google APIs:16
        # Build tools 25.0.3 is chosen for better compatibility with older Ant projects for API 16.
        # Adjust if build errors indicate a different version is needed.
        echo "y" | sdkmanager "platforms;android-16" "add-ons;addon-google_apis-google-16" "build-tools;25.0.3" "platform-tools"

    - name: Cache NDK
      id: cache-ndk
      uses: actions/cache@v4
      with:
        path: ${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_EXTRACTED_DIR }}
        key: ${{ runner.os }}-ndk-${{ env.NDK_VERSION_NAME }}

    - name: Download and set up Android NDK
      if: steps.cache-ndk.outputs.cache-hit != 'true'
      run: |
        mkdir -p ${{ env.NDK_INSTALL_PATH }}
        cd ${{ env.NDK_INSTALL_PATH }}
        wget -q https://dl.google.com/android/repository/${{ env.NDK_VERSION_NAME }}-linux-x86_64.zip -O ndk.zip
        unzip -q ndk.zip
        rm ndk.zip
        echo "NDK extracted to ${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_EXTRACTED_DIR }}"

    - name: Set NDK Environment Variables
      run: |
        echo "NDK_ROOT=${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_EXTRACTED_DIR }}" >> $GITHUB_ENV
        echo "${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_EXTRACTED_DIR }}" >> $GITHUB_PATH
        # Some older build systems might use ANDROID_NDK_HOME
        echo "ANDROID_NDK_HOME=${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_EXTRACTED_DIR }}" >> $GITHUB_ENV

    - name: Create local.properties for Ant
      # This file tells the Ant build system where the SDK and NDK are.
      # It should be created in the root of the Android project (DroidFish directory).
      run: |
        echo "sdk.dir=${ANDROID_HOME}" > DroidFish/local.properties
        echo "ndk.dir=${NDK_ROOT}" >> DroidFish/local.properties
        echo "Created DroidFish/local.properties with SDK and NDK paths"
      # working-directory defaults to GITHUB_WORKSPACE

    - name: Build DroidFish with Ant
      # The Android project is in the DroidFish subdirectory.
      working-directory: DroidFish
      run: ant debug

    - name: Upload DroidFish APK
      uses: actions/upload-artifact@v4
      with:
        name: DroidFish-debug
        path: DroidFish/bin/DroidFish-debug.apk
        if-no-files-found: error # Fail if APK is not found
